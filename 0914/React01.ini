- 동적 경로 매개변수
동적인 URL 경로를 처리하기 위해 파라미터 값을 활용할 수 있다. 게시물 /post/:id와 같은 형식으로 :id 부분이 실제값으로 대체된다.
경로의 일부분으 변수 취급하고, 값을 추출하여 컴포넌트에서 사용한다.

1) 매개변수 콜론(:)으로 시작하고 경로 세그먼트와 함께 정의되어, : 뒤에 있는 부분이 실제값으로 대체된다.

import {Route} from 'react-router-dom';

function App() {
    return (
        <>
        <Route path="/post/:id" compenet={Post} />
        </>
    )
}

2) 파라미터 추출 : useParams 훅을 사용하여 동적 매개변수 값을 추출한다.

import {useParams} from 'react-router-dom';

function Post() {
    const {id} = useParams();

    return <div> ID : {id} </div>;
}

export default Post;

product, id

??번 상품입니다.

/product/123
123번 상품입니다.

- 라우팅 중첩

<Route path="/" element={<Home/>}/>
    <Route path="/post" element={<About/>}/>
    <Route path="/chat" element={<Chat/>}/>
</Route>

/post/chat -> /post/:id
useParams() 사용가능하다.

Outlet은 React Router v6에서 도입되었따. 중첩된 라우팅(Nested Routing) 시 부모 컴포넌트에서 자식 컴포넌트를 랜더링할 때 사용된다.
Outlet를 통해 중첩된 경로의 컴포넌트를 표시한다.

index : 경로 아래에 있는 절대경로(/)는 유효하지 않다. 중첩된 라우팅에서 상위 경로의 절대 경로를 설정하기 위해 사용된다.

- URL 쿼리 매개변수
URL에 추가 정보를 전달하기 위해 사용되는 매개변수다.
일반적으로 ?문자로 시작되고 key=value 형식으로 구성된다. 여러 개의 쿼리 매개변수가 있을 경우 & 문자로 구분된다.
예를 들어, /seacrh?query=keyword&filter=recent : keyword를 검색해서, 최신 순으로 보여줘

1) react-router-dom 패키지에서 useLocation() 훅을 사용하여 URL 정보를 가져온다.
2) URL에서 쿼리 정보만 추출한다.
3) 추출한 값으로 연산을 실행한다.

import {useLocation} from 'react-router-dom';

function Example() {
    const location = useLocation();
    const searchParams = new URPSearchParams(location.search);

    const keyword = searchParams.get('query');
    const filter = searchParams.get('filter');
}

- Programmatic Navigation(프로그래밍 방식으로 페이지 전환)
JavaScript 코드 내에서 페이지 전환
해당 기능은 로그인 이후 리디렉션, 양식 제출 후 결과 페이지 표시 같은 상황에서 유용하다.
A.com -> B.com

1) useHistory() : 현재 URL 이력을 관리하는 객체
2) useNavigate() : 변경 및 페이지 전환에 사용되는 함수
3) <Link>

import {useHistory, Link} from 'react-router-dom';

function Example() {
    const history = useHistory();
    const navigate = useNavigate();

    const handleClick = () => {
        history.push('/other');
    };

    const handleClick2 = () => {
        navigate('/newPage')
    }

    return (
        <>
            <Link to="/another">다른 페이지</Link>
            <button onClick={handleClick}>다른 경로</button>
            <button onClick={handleClick2}새로운 페이지</button>
        </>
    );
}

- 리디렉션(Redirect)
사용자를 현재 페이지에서 다른 경로로 자동으로 이동시키는 기능 (react-router-dom)

import {Redirect} from 'react-router-dom';

function Example() {
    const logIN = useState(false);

    if(logIN) {
        return <Redirect to='/home'/>
    } else {
        return <Redirect to='/login'/>
    }
}

- 보호(Guards)
컴포넌트와 함께 보호 기능을 구현할 수 있다. 인증된 사용자만 접근한다.
조건부 랜더링

import {Route, Redirect} from 'react-router-dom';

function PrivateRoute({compenet : Component, logIN, ...lst}) {
    return (
        <Route>
        {...lst}
        render={(i) => {
            logIN ? (
            <Component {...i}/>
            ) : (
                <Redirect to="/login"/>
            ) 
        }}
    )
}

- 지연 로딩(Lazy Loading) : 초기 어플리케이션 로딩 속도 개선
React.lazy()와 Suspense 컴포넌트를 사용하여 지연 로딩을 구현한다.
로딩 속도 개선이나, 컴포넌트를 필요한 시점에 로드되게 할 수 있다.

React.lazy() : 동적으로 로드할 컴포넌트를 지정하기 위해서 사용
코드 스플리팅(Code splitting),해당 컴포넌트가 실제로 사용될 때까지 해당 모듈을 로드하지 않는다.
Suspense 컴포넌트 : 지연된 컴포넌트가 로드되기 전까지 대체 콘텐츠를 표시하는 역할을 한다.

import React, {lazy, Suspense} from 'react';

const lazyComponent = lazy(() => import('./lazyPage'));

function App() {
    return (
        <>
            <Suspense fallback={<p>Loading...</p>}>
            <lazyComponent/>
            </Suspense>
        </>
    );
}

- 404 에러 처리(404 Error Handlin) : 잘못된 경로로 접근 시 404 에러 페이지를 처리하는 방법.

1) <Switch> 컴포넌트와 <Route> 컴포넌트를 활용한 방법
모든 경로에 대한 <Route> 미리 정의하고, 마지막에 404 에러 페이지를 추가한다.
<Route path="*"/> 이러한 방식으로 처리한다. (가장 일반적이고 간단한 방법이다.)

import {Switch, Route} from 'react-router-dom';

function App() {
    return (
        <>
            <Switch>
                <Route exact path="/" component={Home}/>
                <Route path="/chat" component={Chat}/>
                <Route path="/product" component={Product}/>
                ...
                <Route path="*" component={NotFound}/>
            </Switch>
        </>
    )
}

exact - 중복된 경로가 있을 경우 하나로 처리하기 위함.

2. useLocation() 훅과 조건부 랜더링

import {useLocation} from 'react-router-dom';

function App() {
    return (
        <>
            {location.pathname !== '/' && <NotFound/>} //기본 페이지가 아니면 모두 NotFound 페이지를 보여줘라.
        </>
    )
}