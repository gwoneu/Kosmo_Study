- 서블릿 정보등록

+ web.xml을 사용한 서블릿 등록
web.xml 파일에 <servlet> 태그와 <servlet-mapping> 태그를 사용하여 서블릿 클래스와 URL 패턴을 매핑

<web-app>
    <servlet>
        <servlet-name>myServlet</servlet-name>
        <servlet-class>com.example.MyServlet</servlet-class>
    </servlet>

    <servlet-mapping>
        <servlet-name>myServlet</servlet-name>
        <url-pattern>/servlet</url-pattern>
    </servlet-mapping>s
</web-app>

MyServlet 클래스를 /servlet URL에 매턴에 매핑하였다.

+ 어노테이션을 사용한 서블릿 등록
Java Servlet 3.0부터 어노테이션 기바으로 서블릿 정보등록이 가능해졌다.

@WebServlet("/servlet")

- 페이지 이동

+ 리다이렉트(Redirect)
리다이렉트는 클라이언트에게 특정 URL로 재요청하도록 지시하는 방식
서버는 클라이언트 요청을 받아 처리한 후 상태 코드를 302 or 301 등으로 설정하고, Location 헤더에 새로운 URL을 담아 응답한다.
이후 클라이언트는 이 응답을 받고 새 URL로 재요청을 보낸다.

response.sendRedirect("/newUrl");

두 번의 요청/응답을 거친다.
원래 요청 정보가 유지되지 않는다.
주소창 URL이 변경된다.
GET 메소드만 사용할 수 있다.

+ 포워드(Forward)
포워드는 서버 내부에서 페이지 이동을 처리하는 방식
서버가 클라이언트의 요청을 받고, 해당 요청과 응답 객체를 다른 서블릿, JSP 등에 전달(forward)한다.
해당 서블릿, JSP 등을 이어받아 처리 결과를 생성하여 클라이언트에게 응답한다.

RequestDispatcher dispatcher = request.getRequestDispatcher("newUrl");
dispatcher.forward(request, response);

한 번의 요청/응답을 거친다.
원래 요청 정보가 유지된다.
주소창 URL이 변경되지 않는다.

- 정보 공유
정보 공유는 주로 세 가지 범위에서 이루어진다. -> 요청(request), 세션(session), 어플리케이션(application)

1) 요청 범위(Request Scope)
요청 범위는 한 번의 HTTP 요청을 처리하는 동안 유지되는 정보

request.setAttribute("mAttribute", "Hello");
String myAttribute = (String) request.getAttribute("myAttribute");

2) 세션 범위(Session Scope)
세션 범위는 클라이언트가 웹 사이트에 접속한 후부터 브라우저를 닫거나 로그아웃하기 전까지 유지되는 정보

HttpSession session = request.getSession();
session.setAttribute("user", user);
User user = (User) session.getAttribute("user");

3) 어플리케이션 범위(application Scope)
어플리케이션이 시작되고 종료되기 전까지 유지되며 모든 사용자가 공유하는 정보

ServletContext application = getServletContext();
application.setAttribute("appData", data);
Object data = application.getAttribute("appData");

+ 요청 범위 : 한 번의 HTTP 요청/응답 사이클 동안만 필요한 임시 데이터를 저장
+ 세션 범위 : 한 클라이언트의 여러 요청에 유지되어야 하는 데이터를 저장
+ 어플리케이션 범위 : 어플리케이션 전체에서 공유되어야 하는 데이터를 저장

1. 학생 정보 등록
2. 성적 조회
3. 전체 성적 분석

작업 -> doGet(), doPost()
초기화 -> init() : 서블릿 요청시 최초 1번
종료 -> destroy() : 서블릿 요청을 수행한 뒤 메모리에서 소멸될 때