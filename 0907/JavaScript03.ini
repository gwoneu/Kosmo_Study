- 이벤트
웹 페이지 내에서 사용자의 상호작용, 브라우저 동작 등을 감지하고, 그에 따른 동작을 수행하는 방법
이벤트를 처리하는 방법 : 이벤트 리스너, 이벤트 핸들러

1. HTML 속성을 통한 설정 : HTML 요소의 속성으로 직접 이벤트 핸들러를 설정할 수 있다.
<button onclick = "function()">Click</button>

2. DOM 프로퍼티를 통한 설정 : JSP 코드 내에서 DOM 요소의 프로퍼티로 이벤트 핸들러 함수를 할당할 수 있다.
var btn  document.getElementById('btn');
btn.onclick = function(){
    alert("Click");
};

3. addEventListener 메소드 사용 : 가장 유연하게 이벤트를 처리하는 방법
var btn = document.getElementById("btn");
btn.addEventListener('click')

주요 이벤트
1. Mouse : click, dbclick, mousedown, mouseup, mousemove
2. Keyboard : keydown, keyup, keypress
3. Form : submit, change, focusin/focusout
4. Window : load, resize, scroll

- 이벤트 객체
이벤트가 발생할 때, 관련된 정보를 담고 있는 객체.
이벤트 핸들로(리스너) 함수에 첫번째 인자로 자동전달된다.

button.addEventListener('click', function(event){
    alert(event.targer);
    alert(event.clientX);
    alert(event.clientY);
})

target : 이벤트가 발생한 요소
type : 발생한 이벤트 유형
clientX/ clientY : 마우스의 X/Y 좌표
pageX / pageY : 문서 전체 내에 마우스의 X/Y 좌표

- 이벤트 호출 순서
이벤트가 발생하고, 처리하는 과정에서 어떤 순서로 리스너가 호출되는지

1. 캡처링(Capturing) : 캡처링 단계에서는 이벤트가 문서의 상위에 하뤼로 전파된다.
2. 버블링(Bubbling) : 버블링 단계에서는 이벤트의 하위에서 상위로 전파된다.

일반적으로 대부분 브라우저에서는 버블링을 기본 동작으로 사용한다.
<div id="out">
    <div id="in">
        <button id="btn">click</button>
    </div>
</div>

<script>
    var out = document.getElementById('out');
    var in = document.getElementById('in');
    var btn = document.getElementById('btn');

    out.addEventListener('click', function() {
        alert('out div clicked');
    }, false);

    in.addEventListener('click', function() {
        alert('in div clicked');
    }, false);

    btn.addEventListener('click', function() {
        alert('btn div clicked');
    }, false);
</script>

true : 캡처링
out div clicked
in div clicked
btn div clicked

false(default) : 버블링
btn div clicked
in div clicked
out div clicked

- 이벤트 취소
이벤트가 발생한 후 해당 이벤트의 기본 동작을 중단시키거나, 이벤트 전파를 막는 것.

1. preventDdfault() : 메서드는 이벤트가 발생한 요소에서 기본 동작을 중단시킨다.
var link = document.getElementById('aLink')

link.addEventListener('click', function(event){
    event.preventDdfault();
})

2. stopPropagation() : 해당 메서드는 현재 이벤트가 상위 요소로 전파되지 않도록 중단시킨다.
var inner = document.getElementById('in');

inner.addEventListener('click', function(event){
    event.stopPropagation;
})

event.cancleBubble = true;

반응속도 테스트
웹페이지에 랜덤한 알파벳이 표시되고, 사용자가 해당 문자를 키보드로 입력한다.
정확한 키를 누르면 정답과 함께, 시간이 표시되고
틀리면 오답이 표시된다.
kwydown or keypress, event, Date.now(), Math.random()
var alphabet = 'abcdefghijklmnopqrstuvwxyz';